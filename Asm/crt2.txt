                      ; C:\Users\Dave\Documents\_6809\asm6809-2.12-w64\asm6809.exe -S -l crt2.txt crt2.asm -o crt2.srec
                      ; V3 16/Jan/2021 Using 25.175 Mhz Osc not 25Mhz crystal, Better display of character set
                      
D400                  CRTCAR              EQU  $D400
D401                  CRTCDR              EQU  CRTCAR+1
8000                  VRAM                EQU  $8000
0030                  ASCII0              EQU  $30
0020                  ASCIISPACE          EQU  $20
0050                  COLSPERROW          EQU  $50
001E                  ROWSPERPAGE         EQU  $1E
0030                  ROWSPERPAGEBCD      EQU  $30
0001                  BYTESPERCHAR        EQU  $01
000F                  CHARCOLOUR          EQU  %00001111 ; Black background, white foreground
0000                  CRTLINE1            RMB  2 ; CRTC Address where 1st Line starts,  
0002                  ENDVRAM             RMB  2
                      
0000                  EOS                 EQU  $00      end of string
                      
0000                                      ORG  $0000
                                          
0000  10CE7FD0        CRTStart            lds      #$7FD0      ;System Stack init
0004  5F                                  clrb
0005  8E00CC                              ldx      #CRTCTAB
0008  F7D400          CRTCLOOP            stb      CRTCAR      ; Save Rn in CRTC Address Register        
000B  A680                                lda      ,X+        ; Get Rn value from CRTC Table single + for +1, ++ is +2 and wrong!
000D  B7D401                              sta      CRTCDR      ; Save Rn data value in CRTC Data Register
0010  5C                                  incb
0011  C110                                cmpb     #$10         ; Have we processed all register values
0013  26F3                                bne      CRTCLOOP
                      
0015  8E8000          CLRSCREEN           ldx      #VRAM
0018  8620                                lda      #ASCIISPACE
                                          ;ldb      #CHARCOLOUR
001A                  CLEARSCREEN1        ;stb      ,X+
001A  A780                                sta      ,X+         ; Could Use D and X++
001C  8C8960                              cmpx     #VRAM + COLSPERROW * BYTESPERCHAR * ROWSPERPAGE
001F  2FF9                                ble      CLEARSCREEN1
                                          
0021  8E8000          TOPLINE             ldx      #VRAM
0024  8601                                lda      #$01
0026  170078          TOPLINE1            lbsr      PRINTDIGIT
0029  8B01                                adda      #$01
002B  19                                  daa
002C  8C8050                              cmpx      #VRAM + COLSPERROW * BYTESPERCHAR ;Only 1 byte per character currently 
002F  2FF5                                ble       TOPLINE1
                      ; Print 10's under 1st line
                      
0031  8E8059          SECLINE             ldx      #VRAM + COLSPERROW * BYTESPERCHAR + 9 ; Start at 10th Column
0034  8601                                lda      #$1
0036  8D69            SECLINE1            bsr      PRINTDIGIT ; This will increase X by 2
0038  3009                                leax     9,X
003A  8B01                                adda     #$01
003C  19                                  daa
003D  8C80A0                              cmpx     #VRAM + 2 * COLSPERROW * BYTESPERCHAR ; 2 Bytes per character 0/even is character 1/odd is colour
0040  2FF4                                ble      SECLINE1
                      
                      
0042  8E8910          LOWLINE             ldx      #VRAM + ROWSPERPAGE * COLSPERROW * BYTESPERCHAR - COLSPERROW * BYTESPERCHAR 
0045  8601                                lda      #$01
0047  8D58            LOWLINE1            bsr      PRINTDIGIT
0049  8B01                                adda      #$01
004B  19                                  daa
004C  8C8960                              cmpx      #VRAM + COLSPERROW * BYTESPERCHAR * ROWSPERPAGE; 2 Bytes per character 0/even is character 1/odd is colour
004F  2FF6                                ble       LOWLINE1
                      
0051  8E88C9          LOWSECLINE          ldx      #VRAM + ROWSPERPAGE * COLSPERROW * BYTESPERCHAR - 2 * COLSPERROW * BYTESPERCHAR + 9 ; Start at 10th Column
0054  8601                                lda      #$1
0056  8D49            LOWSECLINE1         bsr      PRINTDIGIT ; This will increase X by 2
0058  3009                                leax     9,X
005A  8B01                                adda     #$01
005C  19                                  daa
005D  8C8910                              cmpx     #VRAM + ROWSPERPAGE * COLSPERROW * BYTESPERCHAR - COLSPERROW * BYTESPERCHAR
0060  2FF4                                ble      LOWSECLINE1
                      
                      
0062  8602            LINENO              lda       #$02
0064  8E8050                              ldx       #VRAM + COLSPERROW * BYTESPERCHAR
0067  8D24            LINENO1             bsr       PRINTNUM
0069  30884C                              leax      76,X  ; Move to end of line
006C  8D1F                                bsr       PRINTNUM ; X should be start of next line after this
006E  8B01                                adda      #$01
0070  19                                  daa
0071  8130                                cmpa      #ROWSPERPAGEBCD
0073  26F2                                bne       LINENO1
                                          ;SWI
                                          ; +7 (4 char), 16 x 4 char= 64=128 bytes + 25
                                          ; Add 32 for end of line (16 char)
0075  4F              CHARDUMP            clra      ; Display two digit character code, character, 1 spaces for 0-255, start at Col 4 (add 7)
0076  8E8097                              ldx       #VRAM - 16 + 7 + 2 * COLSPERROW * BYTESPERCHAR
0079  5F              CHARDUMP1           clrb
007A  308810                              leax      16,X
007D  8D2C            CHARDUMP2           bsr       PRINTHEX
                                          ;leax      2,X
007F  A780                                sta       ,X+
0081  3001                                leax      1,X
0083  4C                                  inca
0084  5C                                  incb
0085  C110                                cmpb      #$10
0087  26F4                                bne       CHARDUMP2
0089  4D                                  tsta
008A  26ED                                bne       CHARDUMP1
                      
008C                  CRTEND
008C  3F                                  swi
                                          
                      ; 12345678901234567890
                      ; 02       1         2 ..... 02
                      
                      ; Take BCD two digit number in A and print at X
008D  3402            PRINTNUM            pshs     a           ; Save A twice
008F  3402                                pshs     a
0091  84F0                                anda     #%11110000  ; Mask LSB
0093  44                                  lsra                 ; Rotate MSB down to LSB
0094  44                                  lsra
0095  44                                  lsra
0096  44                                  lsra
0097  8D08                                bsr PRINTDIGIT
0099  3502                                puls     a           ; Restore A
009B  840F                                anda     #%00001111  ; Mask MSB
009D  8D02                                bsr PRINTDIGIT
009F  3582                                puls     a,pc
                      
                      ; Take Lower 4 bits in A and print ASCII digit at X and increment X
00A1  3402            PRINTDIGIT          pshs     a
00A3  840F                                anda     #%00001111  ; Strip any MSB
00A5  8B30                                adda     #ASCII0     ; Add 48 decimal, 0=$30, 1=$31
00A7  A780                                sta      ,X+
00A9  3582                                puls     a,pc
                      
00AB  3402            PRINTHEX            pshs     a            ; Save byte value as need to return since used for checksum calc
00AD  3402                                pshs     a            ; Save again so we can mask top and lower nibbles
00AF  84F0                                anda     #%11110000   ; Mask High nibble
00B1  44                                  lsra                  ; Shift to Low nibble
00B2  44                                  lsra 
00B3  44                                  lsra
00B4  44                                  lsra
                                     
00B5  8B90                                adda     #$90          ; LSB to ASCII Hex as per page 7-2 of Leventhal
00B7  19                                  daa                    ; 0-9  $30-$39 A-F $41-$46
00B8  8940                                adca     #$40
00BA  19                                  daa
00BB  A780                                sta     ,X+
                                     
00BD  3502                                puls     a 
00BF  840F                                anda     #%00001111    ; Mask Low nibble
                      
00C1  8B90                                adda     #$90          ; LSB to ASCII Hex as per page 7-2 of Leventhal
00C3  19                                  daa
00C4  8940                                adca     #$40
00C6  19                                  daa
00C7  A780                                sta     ,X+
00C9  3502                                puls     a
00CB  39                                  rts
                                          
00CC  63              CRTCTAB             FCB      $63         ; R0 H 62 to 64 Total 99
00CD  50                                  FCB      $50         ; R1 H Displayed 80
00CE  53                                  FCB      $53         ; R2 H from 53 to 55 Sync Position 83
00CF  06                                  FCB      $06         ; R3 H Sync Width 6
00D0  1F                                  FCB      $1F         ; R4 V Total 31
00D1  14                                  FCB      $14         ; R5 V Total Adjust (was 13/$0D)
00D2  1E                                  FCB      $1E         ; R6 V Displayed 30
00D3  1F                                  FCB      $1F         ; R7 V Sync Position 31
00D4  00                                  FCB      $00         ; R8 Interlace mode - Non Interlaced
00D5  0F                                  FCB      $0F         ; R9 Maximum Scan Line Address 
00D6  6D                                  FCB      $6D         ; R10 Cursor Start - Slow Blink C0 + Line 13 Start was 6D Cursor off $20
00D7  6F                                  FCB      $6F         ; R11 Cursor End - Slow Blink C0 + Line 15 Finish 6F
00D8  0000                                FCB      $00,$00     ; R12,R13 Start Address
00DA  0000                                FCB      $00,$00     ; R14,R15 Cursor Address
                                          
                                          
