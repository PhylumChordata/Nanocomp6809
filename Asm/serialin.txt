                      ; C:\Users\Dave\OneDrive\Documents\_6809\asm6809-2.12-w64\asm6809.exe -B -l serialin.txt serialin.asm -o serialin.bin
                      ; C:\Users\Dave\OneDrive\Documents\_6809\asm6809-2.12-w64\asm6809.exe -S -l serialin.txt serialin.asm -o serialin.srec
0000                  SERIALCTRL          EQU  $00           ; Use DP $50   $5000
0000                  SERIALSTATUS        EQU  $00           ; Use DP $50   $5000
0001                  SERIALDATA          EQU  $01           ; Use DP $50   $5001
                      
0003                  CTRLRESET           EQU  %00000011       ; CR1, CR0 1,1 for Master Reset
0001                  CTRLDIVIDE16        EQU  %00000001       ; CR1, CR0 0,1 for divide by 16 1,0 for divide by 64
0002                  CTRLDIVIDE64        EQU  %00000010       ; CR1, CR0 1,0 for divide by 64
0014                  CTRLWORD8N1S        EQU  %00010100       ; CR4, CR3, CR2 1, 0, 1 for 8 Bits, 1 Stop No Parity
0000                  CTRLRTSLOW          EQU  %00000000       ; CR6, CR5, 0,0 RTS low IRQ disabled, requests data
0040                  CTRLRTSHIGH         EQU  %01000000       ; CR6, CR5, 1,0 RTS high IRQ disabled, prevents receiving data
0080                  CTRLIRQENABLED      EQU  %10000000       ; CR7, 1 IRQ enabled
                      
0001                  STATUSRDRF          EQU  %00000001       ; Receive Data Register Full Bit 0
0002                  STATUSTDRE          EQU  %00000010       ; Transmit Data Register Empty Bit 1
0004                  STATUSDCD           EQU  %00000100       ; Data Carrier Detect Bit 2
0008                  STATUSCTS           EQU  %00001000       ; Clear To Send Bit 3
0010                  STATUSFE            EQU  %00010000       ; Framing Error Bit 4
0020                  STATUSOVRN          EQU  %00100000       ; Receiver Overrun Bit 5
0040                  STATUSPE            EQU  %01000000       ; Parity Error Bit 6
0080                  STATUSIRQREQ        EQU  %10000000       ; Interupt Request /IRQ Bit 7
                      
1000                  CODESTART           EQU  $1000
003B                  CODELENGTH          EQU  $3B
                      
0000                  EOS                 EQU  $00      end of string
                      
1200                                      ORG $1200
                                                               ; Read Serial Port and load at $1000 for upto $3B bytes (length of Serial Out code)                                    
1200  10CE1300        SerialInStart       lds      #$1300      ; System Stack init
1204  8650                                lda      #$50             
1206  1F8B                                tfr      a,dp        ; Set Direct Page Register to Serial Port Base Address       
1208  8603                                lda      #CTRLRESET  ; Master Reset bits
120A  9700                                sta      <SERIALCTRL ; Serial Port Control Master Reset
                      
                                   
120C  8616            InitSerial          lda      #CTRLDIVIDE64 | CTRLWORD8N1S | CTRLRTSLOW
120E  9700                                sta      <SERIALCTRL ; ; Serial Port Divide by 64 (3.6864Mhz Xtal /6 /64 =9600 ), 8 Bits No Parity 1 Stop, /RTS Low - receive data, DCD wired low
                      
1210  8E1000                              ldx      #CODESTART  ; Point X to start address where to load file data from serial port
1213  C63B                                ldb      #CODELENGTH ; We will decrement B until 0
                      
1215  BD1224          receive             jsr      receive_char             
1218  A780                                sta      ,x+
121A  5A                                  decb
121B  2703                                beq      SerialInEnd
121D  7E1215                              jmp      receive
                      
1220  3F              SerialInEnd         swi                  ; Software Interupt
1221  7E1200                              jmp     SerialInStart  ; If Continue from SWI
                      
                      
1224  8601            receive_char        lda     #STATUSRDRF   ; Mask Receive Data Register Full
1226  9500            receive_char1       bita    <SERIALSTATUS ; Check RDRF, 1 means has data, 0 loop back
1228  27FC                                beq     receive_char1 ; Keep checking until read for more data
122A  9601                                lda     <SERIALDATA   ; Read data from serial port, should clear RDRF
122C  39                                  rts                   ; Return 
