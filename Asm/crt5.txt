                      ; C:\Users\Dave\Documents\_6809\asm6809-2.12-w64\asm6809.exe -S -l crt5.txt crt5.asm -o crt5.srec
                      ; Updated 04 Jan 2023 for Dual 32K(8K used) VRAM
                      
D400                  CRTCAR              EQU  $D400
D401                  CRTCDR              EQU  CRTCAR+1
8000                  VRAM                EQU  $8000
BFFF                  VRAMTOP             EQU  $BFFF
0030                  ASCII0              EQU  $30
0020                  ASCIISPACE          EQU  $20
0050                  COLSPERROW          EQU  $50
001E                  ROWSPERPAGE         EQU  $1E
0030                  ROWSPERPAGEBCD      EQU  $30
0002                  BYTESPERCHAR        EQU  $02
00F2                  CHARCOLOUR          EQU  %11110010 ; White foreground, blue background
0000                  CRTLINE1            RMB  2 ; CRTC Address where 1st Line starts,  
0002                  ENDVRAM             RMB  2
                      
0000                  EOS                 EQU  $00      end of string
                      
0000                                      ORG  $0000
                                          
0000  10CE7FD0        CRTStart            lds      #$7FD0      ;System Stack init
0004  5F                                  clrb
0005  8E00EA                              ldx      #CRTCTAB
0008  F7D400          CRTCLOOP            stb      CRTCAR      ; Save Rn in CRTC Address Register        
000B  A680                                lda      ,X+        ; Get Rn value from CRTC Table single + for +1, ++ is +2 and wrong!
000D  B7D401                              sta      CRTCDR      ; Save Rn data value in CRTC Data Register
0010  5C                                  incb
0011  C110                                cmpb     #$10         ; Have we processed all register values
0013  26F3                                bne      CRTCLOOP
                      
0015  8E8000          CLRSCREEN           ldx      #VRAM
0018  8620                                lda      #ASCIISPACE
001A  C6F2                                ldb      #CHARCOLOUR
001C  E780            CLEARSCREEN1        stb      ,X+
001E  A780                                sta      ,X+         ; Could Use D and X++
0020  8CBFFF                              cmpx     #VRAMTOP
0023  2FF7                                ble      CLEARSCREEN1
                                          
0025  8E8001          TOPLINE             ldx      #VRAM+1
0028  8601                                lda      #$01
002A  170092          TOPLINE1            lbsr      PRINTDIGIT
002D  8B01                                adda      #$01
002F  19                                  daa
0030  8C80A0                              cmpx      #VRAM + COLSPERROW * BYTESPERCHAR 
0033  2FF5                                ble       TOPLINE1
                      ; Print 10's under 1st line
                      
0035  8E80B3          SECLINE             ldx      #VRAM + 1 + COLSPERROW * BYTESPERCHAR + 9 * BYTESPERCHAR ; Start at 10th Column
0038  8601                                lda      #$1
003A  170082          SECLINE1            lbsr      PRINTDIGIT ; This will increase X by 2
003D  308812                              leax     9*BYTESPERCHAR,X
0040  8B01                                adda     #$01
0042  19                                  daa
0043  8C8140                              cmpx     #VRAM + 2 * COLSPERROW * BYTESPERCHAR ; 2 Bytes per character 0/even is character 1/odd is colour
0046  2FF2                                ble      SECLINE1
                      
                      
0048  8E9221          LOWLINE             ldx      #VRAM + 1 + ROWSPERPAGE * COLSPERROW * BYTESPERCHAR - COLSPERROW * BYTESPERCHAR 
004B  8601                                lda      #$01
004D  8D70            LOWLINE1            bsr      PRINTDIGIT
004F  8B01                                adda     #$01
0051  19                                  daa
0052  8C92C0                              cmpx     #VRAM + COLSPERROW * BYTESPERCHAR * ROWSPERPAGE; 2 Bytes per character 0/even is character 1/odd is colour
0055  2FF6                                ble      LOWLINE1
                      
0057  8E9193          LOWSECLINE          ldx      #VRAM + 1 + ROWSPERPAGE * COLSPERROW * BYTESPERCHAR - 2 * COLSPERROW * BYTESPERCHAR + 9 * BYTESPERCHAR ; Start at 10th Column
005A  8601                                lda      #$1
005C  8D61            LOWSECLINE1         bsr      PRINTDIGIT ; This will increase X by 2
005E  308812                              leax     9*BYTESPERCHAR,X
0061  8B01                                adda     #$01
0063  19                                  daa
0064  8C9220                              cmpx     #VRAM + ROWSPERPAGE * COLSPERROW * BYTESPERCHAR - COLSPERROW * BYTESPERCHAR
0067  2FF3                                ble      LOWSECLINE1
                      
                      
0069  8602            LINENO              lda      #$02
006B  8E80A1                              ldx      #VRAM + 1 + COLSPERROW * BYTESPERCHAR
006E  8D3B            LINENO1             bsr      PRINTNUM
0070  30890098                            leax     76*BYTESPERCHAR,X  ; Move to end of line
0074  8D35                                bsr      PRINTNUM ; X should be start of next line after this
0076  8B01                                adda     #$01
0078  19                                  daa
0079  8130                                cmpa     #ROWSPERPAGEBCD
007B  26F1                                bne      LINENO1
                                          ;SWI
                                          ; +7 (4 char), 16 x 4 char= 64=128 bytes + 25
                                          ; Add 32 for end of line (16 char)
007D  4F              CHARDUMP            clra      ; Display two digit character code, character, 1 spaces for 0-255, start at Col 4 (add 7)
007E  8E8127                              ldx       #VRAM - 32 + 7 + 2 * COLSPERROW * BYTESPERCHAR
0081  5F              CHARDUMP1           clrb
0082  308820                              leax      16*BYTESPERCHAR,X
0085  8D42            CHARDUMP2           bsr       PRINTHEX
0087  A781                                sta       ,X++
0089  3002                                leax      1*BYTESPERCHAR,X
008B  4C                                  inca
008C  5C                                  incb
008D  C110                                cmpb      #$10
008F  26F4                                bne       CHARDUMP2
0091  4D                                  tsta
0092  26ED                                bne       CHARDUMP1
                      
                                          ; +7 (4 char), 16 x 4 char= 64=128 bytes + 25
                                          ; Add 32 for end of line (16 char)
0094  4F              COLDUMP             clra      ; Display two digit character code, character, 1 spaces for 0-255, start at Col 4 (add 7)
0095  8E8C67                              ldx       #VRAM - 32 + 7 + 20 * COLSPERROW * BYTESPERCHAR
0098  C620                                ldb       #$20
009A  308820                              leax      32,X
009D  8D2A            COLDUMP1            bsr       PRINTHEX
                      ;COLDUMP1            leax      4,X
009F  A71F                                sta       -1,X
00A1  E784                                stb       ,X
00A3  3004                                leax      4,X
00A5  4C                                  inca
00A6  8110                                cmpa      #$10
00A8  26F3                                bne       COLDUMP1
                      
00AA                  CRTEND
00AA  3F                                  swi
                                          
                      ; 12345678901234567890
                      ; 02       1         2 ..... 02
                      
                      ; Take BCD two digit number in A and print at X
00AB  3402            PRINTNUM            pshs     a           ; Save A twice
00AD  3402                                pshs     a
00AF  84F0                                anda     #%11110000  ; Mask LSB
00B1  44                                  lsra                 ; Rotate MSB down to LSB
00B2  44                                  lsra
00B3  44                                  lsra
00B4  44                                  lsra
00B5  8D08                                bsr PRINTDIGIT
00B7  3502                                puls     a           ; Restore A
00B9  840F                                anda     #%00001111  ; Mask MSB
00BB  8D02                                bsr PRINTDIGIT
00BD  3582                                puls     a,pc
                      
                      ; Take Lower 4 bits in A and print ASCII digit at X and increment X
00BF  3402            PRINTDIGIT          pshs     a
00C1  840F                                anda     #%00001111  ; Strip any MSB
00C3  8B30                                adda     #ASCII0     ; Add 48 decimal, 0=$30, 1=$31
00C5  A781                                sta      ,X++
00C7  3582                                puls     a,pc
                      
00C9  3402            PRINTHEX            pshs     a            ; Save byte value as need to return since used for checksum calc
00CB  3402                                pshs     a            ; Save again so we can mask top and lower nibbles
00CD  84F0                                anda     #%11110000   ; Mask High nibble
00CF  44                                  lsra                  ; Shift to Low nibble
00D0  44                                  lsra 
00D1  44                                  lsra
00D2  44                                  lsra
                                     
00D3  8B90                                adda     #$90          ; LSB to ASCII Hex as per page 7-2 of Leventhal
00D5  19                                  daa                    ; 0-9  $30-$39 A-F $41-$46
00D6  8940                                adca     #$40
00D8  19                                  daa
00D9  A781                                sta     ,X++
                                     
00DB  3502                                puls     a 
00DD  840F                                anda     #%00001111    ; Mask Low nibble
                      
00DF  8B90                                adda     #$90          ; LSB to ASCII Hex as per page 7-2 of Leventhal
00E1  19                                  daa
00E2  8940                                adca     #$40
00E4  19                                  daa
00E5  A781                                sta     ,X++
00E7  3502                                puls     a
00E9  39                                  rts
                                          
00EA  63              CRTCTAB             FCB      $63         ; R0 H 62 to 64 Total 99
00EB  50                                  FCB      $50         ; R1 H Displayed 80
00EC  53                                  FCB      $53         ; R2 H from 53 to 55 Sync Position 83
00ED  06                                  FCB      $06         ; R3 H Sync Width 6
00EE  1F                                  FCB      $1F         ; R4 V Total 31
00EF  14                                  FCB      $14         ; R5 V Total Adjust (was 13/$0D)
00F0  1E                                  FCB      $1E         ; R6 V Displayed 30
00F1  1F                                  FCB      $1F         ; R7 V Sync Position 31
00F2  00                                  FCB      $00         ; R8 Interlace mode - Non Interlaced
00F3  0F                                  FCB      $0F         ; R9 Maximum Scan Line Address 
00F4  6D                                  FCB      $6D         ; R10 Cursor Start - Slow Blink C0 + Line 13 Start was 6D Cursor off $20
00F5  6F                                  FCB      $6F         ; R11 Cursor End - Slow Blink C0 + Line 15 Finish 6F
00F6  0000                                FCB      $00,$00     ; R12,R13 Start Address
00F8  0000                                FCB      $00,$00     ; R14,R15 Cursor Address
                                          
                                          
