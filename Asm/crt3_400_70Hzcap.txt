                      ; C:\Users\Dave\Documents\_6809\asm6809-2.12-w64\asm6809.exe -S -l crt3_400_70Hzcap.txt crt3_400_70Hzcap.asm -o crt3_400_70Hzcap.srec
                      ; V3 16/Jan/2021 Using 25.175 Mhz Osc not 25Mhz crystal, Better display of character set
                      
D400                  CRTCAR              EQU  $D400
D401                  CRTCDR              EQU  CRTCAR+1
8000                  VRAM                EQU  $8000
0030                  ASCII0              EQU  $30
0020                  ASCIISPACE          EQU  $20
0050                  COLSPERROW          EQU  $50
0019                  ROWSPERPAGE         EQU  $19
0030                  ROWSPERPAGEBCD      EQU  $30
0001                  BYTESPERCHAR        EQU  $01
000F                  CHARCOLOUR          EQU  %00001111 ; Black background, white foreground
0000                  CRTLINE1            RMB  2 ; CRTC Address where 1st Line starts,  
0002                  ENDVRAM             RMB  2
                      
0000                  EOS                 EQU  $00      end of string
                      
0000                                      ORG  $0000
                                          
0000  10CE7FD0        CRTStart            lds      #$7FD0      ;System Stack init
0004  5F                                  clrb
0005  8E00BB                              ldx      #CRTCTAB
0008  F7D400          CRTCLOOP            stb      CRTCAR      ; Save Rn in CRTC Address Register        
000B  A680                                lda      ,X+        ; Get Rn value from CRTC Table single + for +1, ++ is +2 and wrong!
000D  B7D401                              sta      CRTCDR      ; Save Rn data value in CRTC Data Register
0010  5C                                  incb
0011  C110                                cmpb     #$10         ; Have we processed all register values
0013  26F3                                bne      CRTCLOOP
                      
0015  8E8000          CLRSCREEN           ldx      #VRAM
0018  8620                                lda      #ASCIISPACE
                                          ;ldb      #CHARCOLOUR
001A                  CLEARSCREEN1        ;stb      ,X+
001A  A780                                sta      ,X+         ; Could Use D and X++
001C  8C87D0                              cmpx     #VRAM + COLSPERROW * BYTESPERCHAR * ROWSPERPAGE
001F  2FF9                                ble      CLEARSCREEN1
                                          
0021  8E8000          TOPLINE             ldx      #VRAM
0024  8601                                lda      #$01
0026  170067          TOPLINE1            lbsr      PRINTDIGIT
0029  8B01                                adda      #$01
002B  19                                  daa
002C  8C8050                              cmpx      #VRAM + COLSPERROW * BYTESPERCHAR ;Only 1 byte per character currently 
002F  2FF5                                ble       TOPLINE1
                      ; Print 10's under 1st line
                      
0031  8E8059          SECLINE             ldx      #VRAM + COLSPERROW * BYTESPERCHAR + 9 ; Start at 10th Column
0034  8601                                lda      #$1
0036  8D58            SECLINE1            bsr      PRINTDIGIT ; This will increase X by 2
0038  3009                                leax     9,X
003A  8B01                                adda     #$01
003C  19                                  daa
003D  8C80A0                              cmpx     #VRAM + 2 * COLSPERROW * BYTESPERCHAR ; 2 Bytes per character 0/even is character 1/odd is colour
0040  2FF4                                ble      SECLINE1
                      
                      
0042  8E8780          LOWLINE             ldx      #VRAM + ROWSPERPAGE * COLSPERROW * BYTESPERCHAR - COLSPERROW * BYTESPERCHAR 
0045  8601                                lda      #$01
0047  8D47            LOWLINE1            bsr      PRINTDIGIT
0049  8B01                                adda      #$01
004B  19                                  daa
004C  8C87D0                              cmpx      #VRAM + COLSPERROW * BYTESPERCHAR * ROWSPERPAGE; 2 Bytes per character 0/even is character 1/odd is colour
004F  2FF6                                ble       LOWLINE1
                      
0051  8602            LINENO              lda       #$02
0053  8E8050                              ldx       #VRAM + COLSPERROW * BYTESPERCHAR
0056  8D24            LINENO1             bsr       PRINTNUM
0058  30884C                              leax      76,X  ; Move to end of line
005B  8D1F                                bsr       PRINTNUM ; X should be start of next line after this
005D  8B01                                adda      #$01
005F  19                                  daa
0060  8130                                cmpa      #ROWSPERPAGEBCD
0062  26F2                                bne       LINENO1
                                          ;SWI
                                          ; +7 (4 char), 16 x 4 char= 64=128 bytes + 25
                                          ; Add 32 for end of line (16 char)
0064  4F              CHARDUMP            clra      ; Display two digit character code, character, 1 spaces for 0-255, start at Col 4 (add 7)
0065  8E8097                              ldx       #VRAM - 16 + 7 + 2 * COLSPERROW * BYTESPERCHAR
0068  5F              CHARDUMP1           clrb
0069  308810                              leax      16,X
006C  8D2C            CHARDUMP2           bsr       PRINTHEX
                                          ;leax      2,X
006E  A780                                sta       ,X+
0070  3001                                leax      1,X
0072  4C                                  inca
0073  5C                                  incb
0074  C110                                cmpb      #$10
0076  26F4                                bne       CHARDUMP2
0078  4D                                  tsta
0079  26ED                                bne       CHARDUMP1
                      
007B                  CRTEND
007B  3F                                  swi
                                          
                      ; 12345678901234567890
                      ; 02       1         2 ..... 02
                      
                      ; Take BCD two digit number in A and print at X
007C  3402            PRINTNUM            pshs     a           ; Save A twice
007E  3402                                pshs     a
0080  84F0                                anda     #%11110000  ; Mask LSB
0082  44                                  lsra                 ; Rotate MSB down to LSB
0083  44                                  lsra
0084  44                                  lsra
0085  44                                  lsra
0086  8D08                                bsr PRINTDIGIT
0088  3502                                puls     a           ; Restore A
008A  840F                                anda     #%00001111  ; Mask MSB
008C  8D02                                bsr PRINTDIGIT
008E  3582                                puls     a,pc
                      
                      ; Take Lower 4 bits in A and print ASCII digit at X and increment X
0090  3402            PRINTDIGIT          pshs     a
0092  840F                                anda     #%00001111  ; Strip any MSB
0094  8B30                                adda     #ASCII0     ; Add 48 decimal, 0=$30, 1=$31
0096  A780                                sta      ,X+
0098  3582                                puls     a,pc
                      
009A  3402            PRINTHEX            pshs     a            ; Save byte value as need to return since used for checksum calc
009C  3402                                pshs     a            ; Save again so we can mask top and lower nibbles
009E  84F0                                anda     #%11110000   ; Mask High nibble
00A0  44                                  lsra                  ; Shift to Low nibble
00A1  44                                  lsra 
00A2  44                                  lsra
00A3  44                                  lsra
                                     
00A4  8B90                                adda     #$90          ; LSB to ASCII Hex as per page 7-2 of Leventhal
00A6  19                                  daa                    ; 0-9  $30-$39 A-F $41-$46
00A7  8940                                adca     #$40
00A9  19                                  daa
00AA  A780                                sta     ,X+
                                     
00AC  3502                                puls     a 
00AE  840F                                anda     #%00001111    ; Mask Low nibble
                      
00B0  8B90                                adda     #$90          ; LSB to ASCII Hex as per page 7-2 of Leventhal
00B2  19                                  daa
00B3  8940                                adca     #$40
00B5  19                                  daa
00B6  A780                                sta     ,X+
00B8  3502                                puls     a
00BA  39                                  rts
                                                               ; 640 x 400 25 lines x 80 Columns 70 Hz
00BB  63              CRTCTAB             FCB      $63         ; R0 H 63 99 
00BC  50                                  FCB      $50         ; R1 H Displayed 80
00BD  53                                  FCB      $53         ; R2 H 53 Sync Position 83 (52 for LCD)
00BE  0C                                  FCB      $0c         ; R3 H Sync Width 12
00BF  1B                                  FCB      $1B         ; R4 V Total 27
00C0  03                                  FCB      $03         ; R5 V Total Adjust (was 13) (01 for LCD)
00C1  19                                  FCB      $19         ; R6 V Displayed 25 (was 30)
00C2  1A                                  FCB      $1A         ; R7 V Sync Position 29 (was 30)
00C3  00                                  FCB      $00         ; R8 Interlace mode - Non Interlaced
00C4  0F                                  FCB      $0F         ; R9 Maximum Scan Line Address 
00C5  00                                  FCB      $00         ; R10 Cursor Start - Slow Blink C0 + Line 13 Start
00C6  00                                  FCB      $00         ; R11 Cursor End - Slow Blink C0 + Line 15 Finish
00C7  0000                                FCB      $00,$00     ; R12,R13 Start Address
00C9  0000                                FCB      $00,$00     ; R14,R15 Cursor Address
                                          
                                          
